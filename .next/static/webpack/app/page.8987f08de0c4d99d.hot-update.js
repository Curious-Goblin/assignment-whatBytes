/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/PieChart.tsx":
/*!*********************************!*\
  !*** ./components/PieChart.tsx ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// import React from 'react';\n// import { Chart } from 'react-google-charts';\n// interface PieChartProps {\n//     correctAnswers: string;\n// }\n// export function PieChart({ correctAnswers }: PieChartProps) {\n//     const data = [\n//         ['Effort', 'Amount given'],\n//         ['Correct', parseInt(correctAnswers)],\n//         ['Incorrect', 15 - parseInt(correctAnswers)],\n//     ];\n//     const options = {\n//         pieHole: 0.6,\n//         pieSliceTextStyle: {\n//             color: 'black',\n//         },\n//         width: 400,\n//         height: 300,\n//         legend: 'none',\n//         slices: {\n//             0: { color: '#1d4ed8' }, // Blue for correct answers\n//             1: { color: '#94a3b8' }, // Gray for incorrect answers\n//         },\n//         tooltip: { trigger: 'none' }, // Turn off the tooltip\n//         pieSliceBorderColor: 'none', // Remove the border highlight on select\n//         pieSliceText: 'none', // Remove the percentage text\n//     };\n//     return (\n//         <div id=\"donut_single\">\n//             <Chart\n//                 chartType=\"PieChart\"\n//                 data={data}\n//                 options={options}\n//                 width=\"100%\"\n//                 height=\"400px\"\n//             />\n//         </div>\n//     );\n// }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvUGllQ2hhcnQudHN4IiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUM3QiwrQ0FBK0M7QUFFL0MsNEJBQTRCO0FBQzVCLDhCQUE4QjtBQUM5QixJQUFJO0FBRUosZ0VBQWdFO0FBQ2hFLHFCQUFxQjtBQUNyQixzQ0FBc0M7QUFDdEMsaURBQWlEO0FBQ2pELHdEQUF3RDtBQUN4RCxTQUFTO0FBRVQsd0JBQXdCO0FBQ3hCLHdCQUF3QjtBQUN4QiwrQkFBK0I7QUFDL0IsOEJBQThCO0FBQzlCLGFBQWE7QUFDYixzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUMxQixvQkFBb0I7QUFDcEIsbUVBQW1FO0FBQ25FLHFFQUFxRTtBQUNyRSxhQUFhO0FBQ2IsZ0VBQWdFO0FBQ2hFLGdGQUFnRjtBQUNoRiw4REFBOEQ7QUFDOUQsU0FBUztBQUVULGVBQWU7QUFDZixrQ0FBa0M7QUFDbEMscUJBQXFCO0FBQ3JCLHVDQUF1QztBQUN2Qyw4QkFBOEI7QUFDOUIsb0NBQW9DO0FBQ3BDLCtCQUErQjtBQUMvQixpQ0FBaUM7QUFDakMsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixTQUFTO0FBQ1QsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL1BpZUNoYXJ0LnRzeD8zMDhkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBDaGFydCB9IGZyb20gJ3JlYWN0LWdvb2dsZS1jaGFydHMnO1xuXG4vLyBpbnRlcmZhY2UgUGllQ2hhcnRQcm9wcyB7XG4vLyAgICAgY29ycmVjdEFuc3dlcnM6IHN0cmluZztcbi8vIH1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIFBpZUNoYXJ0KHsgY29ycmVjdEFuc3dlcnMgfTogUGllQ2hhcnRQcm9wcykge1xuLy8gICAgIGNvbnN0IGRhdGEgPSBbXG4vLyAgICAgICAgIFsnRWZmb3J0JywgJ0Ftb3VudCBnaXZlbiddLFxuLy8gICAgICAgICBbJ0NvcnJlY3QnLCBwYXJzZUludChjb3JyZWN0QW5zd2VycyldLFxuLy8gICAgICAgICBbJ0luY29ycmVjdCcsIDE1IC0gcGFyc2VJbnQoY29ycmVjdEFuc3dlcnMpXSxcbi8vICAgICBdO1xuXG4vLyAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbi8vICAgICAgICAgcGllSG9sZTogMC42LFxuLy8gICAgICAgICBwaWVTbGljZVRleHRTdHlsZToge1xuLy8gICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICAgIHdpZHRoOiA0MDAsXG4vLyAgICAgICAgIGhlaWdodDogMzAwLFxuLy8gICAgICAgICBsZWdlbmQ6ICdub25lJyxcbi8vICAgICAgICAgc2xpY2VzOiB7XG4vLyAgICAgICAgICAgICAwOiB7IGNvbG9yOiAnIzFkNGVkOCcgfSwgLy8gQmx1ZSBmb3IgY29ycmVjdCBhbnN3ZXJzXG4vLyAgICAgICAgICAgICAxOiB7IGNvbG9yOiAnIzk0YTNiOCcgfSwgLy8gR3JheSBmb3IgaW5jb3JyZWN0IGFuc3dlcnNcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAgdG9vbHRpcDogeyB0cmlnZ2VyOiAnbm9uZScgfSwgLy8gVHVybiBvZmYgdGhlIHRvb2x0aXBcbi8vICAgICAgICAgcGllU2xpY2VCb3JkZXJDb2xvcjogJ25vbmUnLCAvLyBSZW1vdmUgdGhlIGJvcmRlciBoaWdobGlnaHQgb24gc2VsZWN0XG4vLyAgICAgICAgIHBpZVNsaWNlVGV4dDogJ25vbmUnLCAvLyBSZW1vdmUgdGhlIHBlcmNlbnRhZ2UgdGV4dFxuLy8gICAgIH07XG5cbi8vICAgICByZXR1cm4gKFxuLy8gICAgICAgICA8ZGl2IGlkPVwiZG9udXRfc2luZ2xlXCI+XG4vLyAgICAgICAgICAgICA8Q2hhcnRcbi8vICAgICAgICAgICAgICAgICBjaGFydFR5cGU9XCJQaWVDaGFydFwiXG4vLyAgICAgICAgICAgICAgICAgZGF0YT17ZGF0YX1cbi8vICAgICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuLy8gICAgICAgICAgICAgICAgIHdpZHRoPVwiMTAwJVwiXG4vLyAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDAwcHhcIlxuLy8gICAgICAgICAgICAgLz5cbi8vICAgICAgICAgPC9kaXY+XG4vLyAgICAgKTtcbi8vIH1cblxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/PieChart.tsx\n"));

/***/ })

});